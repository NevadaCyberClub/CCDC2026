//node
const fs = require('fs');
const winston = require('winston');

exports.auth = {
    //default user object when registered
    default: {
        scopes: {
            sca: ["user"],
            pwa: ["user"], //needed by pwa
        },
        gids: [ /*1*/ ],
    },

    //isser to use for generated jwt token
    iss: "https://{{ archive_hostname }}/auth",
    //ttl for jwt
    ttl: 24*3600*1000, //1 day

    public_key: fs.readFileSync(__dirname+'/auth.pub'),
    private_key: fs.readFileSync(__dirname+'/auth.key'),

    //option for jwt.sign
    sign_opt: {algorithm: 'RS256'},

    //prevent users from registering new accounts (set to true to allow registration)
    allow_signup: false, 
};

//for local user/pass login (you should use either local, or ldap - but not both)
exports.local = {
    //url base for callbacks only used if req.header.referer is not set (like via cli)
    //url: 'https://{{ archive_hostname }}/auth',

    mailer: { }
};

//for x509
exports.x509 = {
    //http header to look for x509 DN 
    //for nginx set proxy_set_header DN $ssl_client_s_dn
    //for apache, SSLOptions +StdEnvVars will set it to SSL_CLIENT_S_DN
    dn_header: 'dn',
    allow_origin: '*',
};

exports.db = {
    dialect: "sqlite",
    storage: "/db/auth.sqlite",
    logging: false
}

exports.express = {
    //web server port
    host: "0.0.0.0",
    port: 8080,
};

exports.logger = {
    winston: {
        //hide headers which may contain jwt
        requestWhitelist: ['url', /*'headers',*/ 'method', 'httpVersion', 'originalUrl', 'query'],
        transports: [
            //display all logs to console
            new winston.transports.Console({
                timestamp: function() {
                    var d = new Date();
                    return d.toString(); //show timestamp
                },
                level: 'warn',
                colorize: true
            }),
        ]
    }
};


